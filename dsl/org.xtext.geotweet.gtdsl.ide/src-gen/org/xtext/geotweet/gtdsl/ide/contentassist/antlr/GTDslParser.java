/*
 * generated by Xtext 2.10.0
 */
package org.xtext.geotweet.gtdsl.ide.contentassist.antlr;

import com.google.inject.Inject;
import java.util.Collection;
import java.util.HashMap;
import java.util.Map;
import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.xtext.geotweet.gtdsl.ide.contentassist.antlr.internal.InternalGTDslParser;
import org.xtext.geotweet.gtdsl.services.GTDslGrammarAccess;

public class GTDslParser extends AbstractContentAssistParser {

	@Inject
	private GTDslGrammarAccess grammarAccess;

	private Map<AbstractElement, String> nameMappings;

	@Override
	protected InternalGTDslParser createParser() {
		InternalGTDslParser result = new InternalGTDslParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getTypeAccess().getAlternatives(), "rule__Type__Alternatives");
					put(grammarAccess.getHashtagAccess().getColorAlternatives_3_0(), "rule__Hashtag__ColorAlternatives_3_0");
					put(grammarAccess.getHashtagAccess().getGroup(), "rule__Hashtag__Group__0");
					put(grammarAccess.getHashtagListAccess().getGroup(), "rule__HashtagList__Group__0");
					put(grammarAccess.getHashtagListAccess().getGroup_3(), "rule__HashtagList__Group_3__0");
					put(grammarAccess.getHashtagListAccess().getGroup_3_1(), "rule__HashtagList__Group_3_1__0");
					put(grammarAccess.getCountryAccess().getGroup(), "rule__Country__Group__0");
					put(grammarAccess.getCountryListAccess().getGroup(), "rule__CountryList__Group__0");
					put(grammarAccess.getCountryListAccess().getGroup_3(), "rule__CountryList__Group_3__0");
					put(grammarAccess.getCountryListAccess().getGroup_3_1(), "rule__CountryList__Group_3_1__0");
					put(grammarAccess.getModelAccess().getElementsAssignment(), "rule__Model__ElementsAssignment");
					put(grammarAccess.getHashtagAccess().getNameAssignment_1(), "rule__Hashtag__NameAssignment_1");
					put(grammarAccess.getHashtagAccess().getColorAssignment_3(), "rule__Hashtag__ColorAssignment_3");
					put(grammarAccess.getHashtagListAccess().getNameAssignment_1(), "rule__HashtagList__NameAssignment_1");
					put(grammarAccess.getHashtagListAccess().getHashtagAssignment_3_0(), "rule__HashtagList__HashtagAssignment_3_0");
					put(grammarAccess.getHashtagListAccess().getHashtagAssignment_3_1_1(), "rule__HashtagList__HashtagAssignment_3_1_1");
					put(grammarAccess.getCountryAccess().getNameAssignment_1(), "rule__Country__NameAssignment_1");
					put(grammarAccess.getCountryListAccess().getNameAssignment_1(), "rule__CountryList__NameAssignment_1");
					put(grammarAccess.getCountryListAccess().getCountryAssignment_3_0(), "rule__CountryList__CountryAssignment_3_0");
					put(grammarAccess.getCountryListAccess().getCountryAssignment_3_1_1(), "rule__CountryList__CountryAssignment_3_1_1");
				}
			};
		}
		return nameMappings.get(element);
	}

	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			InternalGTDslParser typedParser = (InternalGTDslParser) parser;
			typedParser.entryRuleModel();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public GTDslGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(GTDslGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
