/*
 * generated by Xtext 2.10.0
 */
grammar InternalGTDsl;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package org.xtext.geotweet.gtdsl.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.xtext.geotweet.gtdsl.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xtext.geotweet.gtdsl.services.GTDslGrammarAccess;

}

@parser::members {

 	private GTDslGrammarAccess grammarAccess;

    public InternalGTDslParser(TokenStream input, GTDslGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Model";
   	}

   	@Override
   	protected GTDslGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	iv_ruleModel=ruleModel
	{ $current=$iv_ruleModel.current; }
	EOF;

// Rule Model
ruleModel returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getModelAccess().getElementsTypeParserRuleCall_0());
			}
			lv_elements_0_0=ruleType
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getModelRule());
				}
				add(
					$current,
					"elements",
					lv_elements_0_0,
					"org.xtext.geotweet.gtdsl.GTDsl.Type");
				afterParserOrEnumRuleCall();
			}
		)
	)*
;

// Entry rule entryRuleType
entryRuleType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTypeRule()); }
	iv_ruleType=ruleType
	{ $current=$iv_ruleType.current; }
	EOF;

// Rule Type
ruleType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getTypeAccess().getHashtagListParserRuleCall_0());
		}
		this_HashtagList_0=ruleHashtagList
		{
			$current = $this_HashtagList_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getTypeAccess().getCountryListParserRuleCall_1());
		}
		this_CountryList_1=ruleCountryList
		{
			$current = $this_CountryList_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleHashtag
entryRuleHashtag returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getHashtagRule()); }
	iv_ruleHashtag=ruleHashtag
	{ $current=$iv_ruleHashtag.current; }
	EOF;

// Rule Hashtag
ruleHashtag returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			otherlv_0='#'
			{
				newLeafNode(otherlv_0, grammarAccess.getHashtagAccess().getNumberSignKeyword_0_0());
			}
			(
				(
					lv_name_1_0=RULE_ID
					{
						newLeafNode(lv_name_1_0, grammarAccess.getHashtagAccess().getNameIDTerminalRuleCall_0_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getHashtagRule());
						}
						setWithLastConsumed(
							$current,
							"name",
							lv_name_1_0,
							"org.eclipse.xtext.common.Terminals.ID");
					}
				)
			)
			otherlv_2=':'
			{
				newLeafNode(otherlv_2, grammarAccess.getHashtagAccess().getColonKeyword_0_2());
			}
			(
				(
					(
						lv_color_3_1='red'
						{
							newLeafNode(lv_color_3_1, grammarAccess.getHashtagAccess().getColorRedKeyword_0_3_0_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getHashtagRule());
							}
							setWithLastConsumed($current, "color", lv_color_3_1, null);
						}
						    |
						lv_color_3_2='blue'
						{
							newLeafNode(lv_color_3_2, grammarAccess.getHashtagAccess().getColorBlueKeyword_0_3_0_1());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getHashtagRule());
							}
							setWithLastConsumed($current, "color", lv_color_3_2, null);
						}
						    |
						lv_color_3_3='green'
						{
							newLeafNode(lv_color_3_3, grammarAccess.getHashtagAccess().getColorGreenKeyword_0_3_0_2());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getHashtagRule());
							}
							setWithLastConsumed($current, "color", lv_color_3_3, null);
						}
					)
				)
			)
		)
		(
			this_NEWLINE_4=RULE_NEWLINE
			{
				newLeafNode(this_NEWLINE_4, grammarAccess.getHashtagAccess().getNEWLINETerminalRuleCall_1());
			}
		)+
	)
;

// Entry rule entryRuleHashtagList
entryRuleHashtagList returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getHashtagListRule()); }
	iv_ruleHashtagList=ruleHashtagList
	{ $current=$iv_ruleHashtagList.current; }
	EOF;

// Rule HashtagList
ruleHashtagList returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='tags'
		{
			newLeafNode(otherlv_0, grammarAccess.getHashtagListAccess().getTagsKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getHashtagListAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getHashtagListRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_2='['
		{
			newLeafNode(otherlv_2, grammarAccess.getHashtagListAccess().getLeftSquareBracketKeyword_2());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getHashtagListAccess().getHashtagHashtagParserRuleCall_3_0_0());
					}
					lv_hashtag_3_0=ruleHashtag
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getHashtagListRule());
						}
						add(
							$current,
							"hashtag",
							lv_hashtag_3_0,
							"org.xtext.geotweet.gtdsl.GTDsl.Hashtag");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getHashtagListAccess().getHashtagHashtagParserRuleCall_3_1_0());
					}
					lv_hashtag_4_0=ruleHashtag
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getHashtagListRule());
						}
						add(
							$current,
							"hashtag",
							lv_hashtag_4_0,
							"org.xtext.geotweet.gtdsl.GTDsl.Hashtag");
						afterParserOrEnumRuleCall();
					}
				)
			)+
		)
		otherlv_5=']'
		{
			newLeafNode(otherlv_5, grammarAccess.getHashtagListAccess().getRightSquareBracketKeyword_4());
		}
	)
;

// Entry rule entryRuleCountry
entryRuleCountry returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCountryRule()); }
	iv_ruleCountry=ruleCountry
	{ $current=$iv_ruleCountry.current; }
	EOF;

// Rule Country
ruleCountry returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='country'
		{
			newLeafNode(otherlv_0, grammarAccess.getCountryAccess().getCountryKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getCountryAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getCountryRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
	)
;

// Entry rule entryRuleCountryList
entryRuleCountryList returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCountryListRule()); }
	iv_ruleCountryList=ruleCountryList
	{ $current=$iv_ruleCountryList.current; }
	EOF;

// Rule CountryList
ruleCountryList returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='countries'
		{
			newLeafNode(otherlv_0, grammarAccess.getCountryListAccess().getCountriesKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getCountryListAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getCountryListRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_2='['
		{
			newLeafNode(otherlv_2, grammarAccess.getCountryListAccess().getLeftSquareBracketKeyword_2());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getCountryListAccess().getCountryCountryParserRuleCall_3_0_0());
					}
					lv_country_3_0=ruleCountry
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getCountryListRule());
						}
						add(
							$current,
							"country",
							lv_country_3_0,
							"org.xtext.geotweet.gtdsl.GTDsl.Country");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_4=','
				{
					newLeafNode(otherlv_4, grammarAccess.getCountryListAccess().getCommaKeyword_3_1_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getCountryListAccess().getCountryCountryParserRuleCall_3_1_1_0());
						}
						lv_country_5_0=ruleCountry
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getCountryListRule());
							}
							add(
								$current,
								"country",
								lv_country_5_0,
								"org.xtext.geotweet.gtdsl.GTDsl.Country");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
		)
		otherlv_6=']'
		{
			newLeafNode(otherlv_6, grammarAccess.getCountryListAccess().getRightSquareBracketKeyword_4());
		}
	)
;

RULE_NEWLINE : '\r'? '\n';

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
