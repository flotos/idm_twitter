/*
 * generated by Xtext 2.10.0
 */
package org.xtext.geotweet.gtdsl.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.xtext.geotweet.gtdsl.gTDsl.Country;
import org.xtext.geotweet.gtdsl.gTDsl.CountryList;
import org.xtext.geotweet.gtdsl.gTDsl.GTDslPackage;
import org.xtext.geotweet.gtdsl.gTDsl.Hashtag;
import org.xtext.geotweet.gtdsl.gTDsl.HashtagList;
import org.xtext.geotweet.gtdsl.gTDsl.Model;
import org.xtext.geotweet.gtdsl.gTDsl.Query;
import org.xtext.geotweet.gtdsl.services.GTDslGrammarAccess;

@SuppressWarnings("all")
public class GTDslSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private GTDslGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == GTDslPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case GTDslPackage.COUNTRY:
				sequence_Country(context, (Country) semanticObject); 
				return; 
			case GTDslPackage.COUNTRY_LIST:
				sequence_CountryList(context, (CountryList) semanticObject); 
				return; 
			case GTDslPackage.HASHTAG:
				sequence_Hashtag(context, (Hashtag) semanticObject); 
				return; 
			case GTDslPackage.HASHTAG_LIST:
				sequence_HashtagList(context, (HashtagList) semanticObject); 
				return; 
			case GTDslPackage.MODEL:
				sequence_Model(context, (Model) semanticObject); 
				return; 
			case GTDslPackage.QUERY:
				sequence_Query(context, (Query) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Type returns CountryList
	 *     CountryList returns CountryList
	 *
	 * Constraint:
	 *     (name=ID country+=Country country+=Country*)
	 */
	protected void sequence_CountryList(ISerializationContext context, CountryList semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Country returns Country
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_Country(ISerializationContext context, Country semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GTDslPackage.Literals.COUNTRY__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GTDslPackage.Literals.COUNTRY__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getCountryAccess().getNameIDTerminalRuleCall_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Type returns HashtagList
	 *     HashtagList returns HashtagList
	 *
	 * Constraint:
	 *     (name=ID hashtag+=Hashtag hashtag+=Hashtag+)
	 */
	protected void sequence_HashtagList(ISerializationContext context, HashtagList semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Hashtag returns Hashtag
	 *
	 * Constraint:
	 *     (name=ID (color='red' | color='blue' | color='green' | color='yellow'))
	 */
	protected void sequence_Hashtag(ISerializationContext context, Hashtag semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Model returns Model
	 *
	 * Constraint:
	 *     (elements+=Type* query=Query)
	 */
	protected void sequence_Model(ISerializationContext context, Model semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Query returns Query
	 *
	 * Constraint:
	 *     (name=ID hashtags=[HashtagList|ID] countries=[CountryList|ID])
	 */
	protected void sequence_Query(ISerializationContext context, Query semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GTDslPackage.Literals.QUERY__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GTDslPackage.Literals.QUERY__NAME));
			if (transientValues.isValueTransient(semanticObject, GTDslPackage.Literals.QUERY__HASHTAGS) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GTDslPackage.Literals.QUERY__HASHTAGS));
			if (transientValues.isValueTransient(semanticObject, GTDslPackage.Literals.QUERY__COUNTRIES) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GTDslPackage.Literals.QUERY__COUNTRIES));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getQueryAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getQueryAccess().getHashtagsHashtagListIDTerminalRuleCall_3_0_1(), semanticObject.getHashtags());
		feeder.accept(grammarAccess.getQueryAccess().getCountriesCountryListIDTerminalRuleCall_5_0_1(), semanticObject.getCountries());
		feeder.finish();
	}
	
	
}
