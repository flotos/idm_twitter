/*
 * generated by Xtext 2.10.0
 */
package org.xtext.geotweet.gtdsl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class GTDslGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.geotweet.gtdsl.GTDsl.Model");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cElementsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cElementsTypeParserRuleCall_0_0 = (RuleCall)cElementsAssignment_0.eContents().get(0);
		private final Assignment cQueryAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cQueryQueryParserRuleCall_1_0 = (RuleCall)cQueryAssignment_1.eContents().get(0);
		
		//Model:
		//	elements+=Type* query=Query;
		@Override public ParserRule getRule() { return rule; }
		
		//elements+=Type* query=Query
		public Group getGroup() { return cGroup; }
		
		//elements+=Type*
		public Assignment getElementsAssignment_0() { return cElementsAssignment_0; }
		
		//Type
		public RuleCall getElementsTypeParserRuleCall_0_0() { return cElementsTypeParserRuleCall_0_0; }
		
		//query=Query
		public Assignment getQueryAssignment_1() { return cQueryAssignment_1; }
		
		//Query
		public RuleCall getQueryQueryParserRuleCall_1_0() { return cQueryQueryParserRuleCall_1_0; }
	}
	public class TypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.geotweet.gtdsl.GTDsl.Type");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cHashtagListParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cCountryListParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Type:
		//	HashtagList | CountryList;
		@Override public ParserRule getRule() { return rule; }
		
		//HashtagList | CountryList
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//HashtagList
		public RuleCall getHashtagListParserRuleCall_0() { return cHashtagListParserRuleCall_0; }
		
		//CountryList
		public RuleCall getCountryListParserRuleCall_1() { return cCountryListParserRuleCall_1; }
	}
	public class HashtagElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.geotweet.gtdsl.GTDsl.Hashtag");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNumberSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cColorAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Alternatives cColorAlternatives_3_0 = (Alternatives)cColorAssignment_3.eContents().get(0);
		private final Keyword cColorRedKeyword_3_0_0 = (Keyword)cColorAlternatives_3_0.eContents().get(0);
		private final Keyword cColorBlueKeyword_3_0_1 = (Keyword)cColorAlternatives_3_0.eContents().get(1);
		private final Keyword cColorGreenKeyword_3_0_2 = (Keyword)cColorAlternatives_3_0.eContents().get(2);
		private final Keyword cColorYellowKeyword_3_0_3 = (Keyword)cColorAlternatives_3_0.eContents().get(3);
		
		//Hashtag:
		//	'#' name=ID ':' color=('red' | 'blue' | 'green' | 'yellow');
		@Override public ParserRule getRule() { return rule; }
		
		//'#' name=ID ':' color=('red' | 'blue' | 'green' | 'yellow')
		public Group getGroup() { return cGroup; }
		
		//'#'
		public Keyword getNumberSignKeyword_0() { return cNumberSignKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//color=('red' | 'blue' | 'green' | 'yellow')
		public Assignment getColorAssignment_3() { return cColorAssignment_3; }
		
		//('red' | 'blue' | 'green' | 'yellow')
		public Alternatives getColorAlternatives_3_0() { return cColorAlternatives_3_0; }
		
		//'red'
		public Keyword getColorRedKeyword_3_0_0() { return cColorRedKeyword_3_0_0; }
		
		//'blue'
		public Keyword getColorBlueKeyword_3_0_1() { return cColorBlueKeyword_3_0_1; }
		
		//'green'
		public Keyword getColorGreenKeyword_3_0_2() { return cColorGreenKeyword_3_0_2; }
		
		//'yellow'
		public Keyword getColorYellowKeyword_3_0_3() { return cColorYellowKeyword_3_0_3; }
	}
	public class HashtagListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.geotweet.gtdsl.GTDsl.HashtagList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTagsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cHashtagAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cHashtagHashtagParserRuleCall_3_0_0 = (RuleCall)cHashtagAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cHashtagAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cHashtagHashtagParserRuleCall_3_1_1_0 = (RuleCall)cHashtagAssignment_3_1_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//HashtagList:
		//	'tags' name=ID '[' (hashtag+=Hashtag ("," hashtag+=Hashtag)+) ']';
		@Override public ParserRule getRule() { return rule; }
		
		//'tags' name=ID '[' (hashtag+=Hashtag ("," hashtag+=Hashtag)+) ']'
		public Group getGroup() { return cGroup; }
		
		//'tags'
		public Keyword getTagsKeyword_0() { return cTagsKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_2() { return cLeftSquareBracketKeyword_2; }
		
		//(hashtag+=Hashtag ("," hashtag+=Hashtag)+)
		public Group getGroup_3() { return cGroup_3; }
		
		//hashtag+=Hashtag
		public Assignment getHashtagAssignment_3_0() { return cHashtagAssignment_3_0; }
		
		//Hashtag
		public RuleCall getHashtagHashtagParserRuleCall_3_0_0() { return cHashtagHashtagParserRuleCall_3_0_0; }
		
		//("," hashtag+=Hashtag)+
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//","
		public Keyword getCommaKeyword_3_1_0() { return cCommaKeyword_3_1_0; }
		
		//hashtag+=Hashtag
		public Assignment getHashtagAssignment_3_1_1() { return cHashtagAssignment_3_1_1; }
		
		//Hashtag
		public RuleCall getHashtagHashtagParserRuleCall_3_1_1_0() { return cHashtagHashtagParserRuleCall_3_1_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_4() { return cRightSquareBracketKeyword_4; }
	}
	public class CountryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.geotweet.gtdsl.GTDsl.Country");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//Country:
		//	name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}
	public class CountryListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.geotweet.gtdsl.GTDsl.CountryList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCountriesKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cCountryAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cCountryCountryParserRuleCall_3_0_0 = (RuleCall)cCountryAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cCountryAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cCountryCountryParserRuleCall_3_1_1_0 = (RuleCall)cCountryAssignment_3_1_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//CountryList:
		//	'countries' name=ID '[' (country+=Country ("," country+=Country)*) ']';
		@Override public ParserRule getRule() { return rule; }
		
		//'countries' name=ID '[' (country+=Country ("," country+=Country)*) ']'
		public Group getGroup() { return cGroup; }
		
		//'countries'
		public Keyword getCountriesKeyword_0() { return cCountriesKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_2() { return cLeftSquareBracketKeyword_2; }
		
		//(country+=Country ("," country+=Country)*)
		public Group getGroup_3() { return cGroup_3; }
		
		//country+=Country
		public Assignment getCountryAssignment_3_0() { return cCountryAssignment_3_0; }
		
		//Country
		public RuleCall getCountryCountryParserRuleCall_3_0_0() { return cCountryCountryParserRuleCall_3_0_0; }
		
		//("," country+=Country)*
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//","
		public Keyword getCommaKeyword_3_1_0() { return cCommaKeyword_3_1_0; }
		
		//country+=Country
		public Assignment getCountryAssignment_3_1_1() { return cCountryAssignment_3_1_1; }
		
		//Country
		public RuleCall getCountryCountryParserRuleCall_3_1_1_0() { return cCountryCountryParserRuleCall_3_1_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_4() { return cRightSquareBracketKeyword_4; }
	}
	public class QueryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.geotweet.gtdsl.GTDsl.Query");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMapKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cDisplaysKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cHashtagsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cHashtagsHashtagListCrossReference_3_0 = (CrossReference)cHashtagsAssignment_3.eContents().get(0);
		private final RuleCall cHashtagsHashtagListIDTerminalRuleCall_3_0_1 = (RuleCall)cHashtagsHashtagListCrossReference_3_0.eContents().get(1);
		private final Keyword cInKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cCountriesAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final CrossReference cCountriesCountryListCrossReference_5_0 = (CrossReference)cCountriesAssignment_5.eContents().get(0);
		private final RuleCall cCountriesCountryListIDTerminalRuleCall_5_0_1 = (RuleCall)cCountriesCountryListCrossReference_5_0.eContents().get(1);
		
		//Query:
		//	'map' name=ID 'displays' hashtags=[HashtagList] 'in' countries=[CountryList];
		@Override public ParserRule getRule() { return rule; }
		
		//'map' name=ID 'displays' hashtags=[HashtagList] 'in' countries=[CountryList]
		public Group getGroup() { return cGroup; }
		
		//'map'
		public Keyword getMapKeyword_0() { return cMapKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'displays'
		public Keyword getDisplaysKeyword_2() { return cDisplaysKeyword_2; }
		
		//hashtags=[HashtagList]
		public Assignment getHashtagsAssignment_3() { return cHashtagsAssignment_3; }
		
		//[HashtagList]
		public CrossReference getHashtagsHashtagListCrossReference_3_0() { return cHashtagsHashtagListCrossReference_3_0; }
		
		//ID
		public RuleCall getHashtagsHashtagListIDTerminalRuleCall_3_0_1() { return cHashtagsHashtagListIDTerminalRuleCall_3_0_1; }
		
		//'in'
		public Keyword getInKeyword_4() { return cInKeyword_4; }
		
		//countries=[CountryList]
		public Assignment getCountriesAssignment_5() { return cCountriesAssignment_5; }
		
		//[CountryList]
		public CrossReference getCountriesCountryListCrossReference_5_0() { return cCountriesCountryListCrossReference_5_0; }
		
		//ID
		public RuleCall getCountriesCountryListIDTerminalRuleCall_5_0_1() { return cCountriesCountryListIDTerminalRuleCall_5_0_1; }
	}
	
	
	private final ModelElements pModel;
	private final TypeElements pType;
	private final HashtagElements pHashtag;
	private final HashtagListElements pHashtagList;
	private final CountryElements pCountry;
	private final CountryListElements pCountryList;
	private final QueryElements pQuery;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public GTDslGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pType = new TypeElements();
		this.pHashtag = new HashtagElements();
		this.pHashtagList = new HashtagListElements();
		this.pCountry = new CountryElements();
		this.pCountryList = new CountryListElements();
		this.pQuery = new QueryElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.geotweet.gtdsl.GTDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	elements+=Type* query=Query;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//Type:
	//	HashtagList | CountryList;
	public TypeElements getTypeAccess() {
		return pType;
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}
	
	//Hashtag:
	//	'#' name=ID ':' color=('red' | 'blue' | 'green' | 'yellow');
	public HashtagElements getHashtagAccess() {
		return pHashtag;
	}
	
	public ParserRule getHashtagRule() {
		return getHashtagAccess().getRule();
	}
	
	//HashtagList:
	//	'tags' name=ID '[' (hashtag+=Hashtag ("," hashtag+=Hashtag)+) ']';
	public HashtagListElements getHashtagListAccess() {
		return pHashtagList;
	}
	
	public ParserRule getHashtagListRule() {
		return getHashtagListAccess().getRule();
	}
	
	//Country:
	//	name=ID;
	public CountryElements getCountryAccess() {
		return pCountry;
	}
	
	public ParserRule getCountryRule() {
		return getCountryAccess().getRule();
	}
	
	//CountryList:
	//	'countries' name=ID '[' (country+=Country ("," country+=Country)*) ']';
	public CountryListElements getCountryListAccess() {
		return pCountryList;
	}
	
	public ParserRule getCountryListRule() {
		return getCountryListAccess().getRule();
	}
	
	//Query:
	//	'map' name=ID 'displays' hashtags=[HashtagList] 'in' countries=[CountryList];
	public QueryElements getQueryAccess() {
		return pQuery;
	}
	
	public ParserRule getQueryRule() {
		return getQueryAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/ *'->'* /';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
