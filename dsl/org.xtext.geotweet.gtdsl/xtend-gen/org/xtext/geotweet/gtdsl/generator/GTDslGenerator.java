/**
 * generated by Xtext 2.10.0
 */
package org.xtext.geotweet.gtdsl.generator;

import com.google.common.collect.Iterables;
import com.google.inject.Inject;
import java.util.List;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.common.util.TreeIterator;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.naming.IQualifiedNameProvider;
import org.eclipse.xtext.xbase.lib.Extension;
import org.eclipse.xtext.xbase.lib.Functions.Function1;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;
import org.eclipse.xtext.xbase.lib.ListExtensions;
import org.xtext.geotweet.gtdsl.gTDsl.Country;
import org.xtext.geotweet.gtdsl.gTDsl.CountryList;
import org.xtext.geotweet.gtdsl.gTDsl.Hashtag;
import org.xtext.geotweet.gtdsl.gTDsl.HashtagList;
import org.xtext.geotweet.gtdsl.gTDsl.Query;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class GTDslGenerator extends AbstractGenerator {
  @Inject
  @Extension
  private IQualifiedNameProvider _iQualifiedNameProvider;
  
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    TreeIterator<EObject> _allContents = resource.getAllContents();
    Iterable<EObject> _iterable = IteratorExtensions.<EObject>toIterable(_allContents);
    Iterable<Query> _filter = Iterables.<Query>filter(_iterable, Query.class);
    for (final Query e : _filter) {
      String _compile = this.compile(e);
      fsa.generateFile(
        "config.py", _compile);
    }
  }
  
  public String compile(final Query query) {
    HashtagList _hashtags = query.getHashtags();
    EList<Hashtag> _hashtag = _hashtags.getHashtag();
    final Function1<Hashtag, String> _function = (Hashtag tag) -> {
      String _name = tag.getName();
      String _plus = ("{\'name\': " + _name);
      String _plus_1 = (_plus + ", \'color\':");
      String _color = tag.getColor();
      String _plus_2 = (_plus_1 + _color);
      return (_plus_2 + "}");
    };
    List<String> _map = ListExtensions.<Hashtag, String>map(_hashtag, _function);
    String hashTagList = ("hashtags = " + _map);
    CountryList _countries = query.getCountries();
    EList<Country> _country = _countries.getCountry();
    final Function1<Country, String> _function_1 = (Country it) -> {
      return it.getName();
    };
    List<String> _map_1 = ListExtensions.<Country, String>map(_country, _function_1);
    String countryList = ("country_list = " + _map_1);
    return ((hashTagList + "\n") + countryList);
  }
}
